== Getting Started

1. Make sure you have rails version 4. Type "rails -v" to make sure.
2. From this project directory, do "bundle install --without production"
3. To start the server "rails server".
4. Navigate your browser to localhost:3000.


== Setting up with Git

1. Instantiate this directory as a git repository with "git init".
2. Go to github.com, create a new repository, then follow instructions on how to add a remote repository that links to github.
3. Remember, you have to "git add" changes to ready it for a commit, then "git commit" to commit those changes locally, then "git push origin master" to push it to the remote "origin" repository, which is the previously created github.com repository.

== Deploying to Heroku

1. Download the Heroku Toolbelt.
2. Go to Heroku.com and register.
3. Issue "heroku login" to authenticate, with the credentials from previous step. Make sure it's a git repository, by issuing "git init", and also "git add", "git commit" your files.
4. Then "heroku create" to create this app on heroku. This command also adds a "heroku" remote repository that you can push to.
5. To deploy, issue "git push heroku master".
6. You may need to run migrations on heroku afterwards, with "heroku run rake db:migrate".
7. Other helpful heroku commands:
  - heroku logs
  - heroku logs -t
  - heroku rename
  - heroku restart
  - heroku run console
  - heroku help

  http://guarded-woodland-5687.herokuapp.com/


== Useful links

http://api.rubyonrails.org/classes/ActiveRecord/Associations/ClassMethods.html
http://guides.rubyonrails.org/association_basics.html
http://guides.rubyonrails.org/routing.html
http://guides.rubyonrails.org/layouts_and_rendering.html

== Here's how to set up the models:

Post Model
1. First, create a migration to modify the database. In this migration, we want to create the table. Rails migrations are the only place where we want to use generators. Issue this command from the terminal within your project directory: rails generate migration create_posts
2. Open the newly created migration file in your code editor, and take a look at the migration file. Use the "create_table" method to create the necessary table and columns. We want: a url and title, which should both be strings and a description which should be text.
3. From the terminal again, issue this command: rake db:migrate (you may need to do rake db:create first, if you're using mysql or postgres). If you're getting a rake error, you can try adding "bundle exec" before the rake command.
4. Then take a look at your database and see that you have a "posts" table, with three columns: url, title and description.
5. Create a Post model file: under app/models directory, create a post.rb file put "class Post < ActiveRecord::Base; end"
6. Open rails console, and create your first Post object: Post.create(title: "My first post", description: "I sure hop this works!", url: "www.yahoo.com"). Verify by looking at your database that this worked.

User Model
1. Same as the Post model, except the User model should have a username column of type string.

== 1:M between User and Post

It's a two step process:
1. First, we need to modify the database to create a new foreign key column on the posts table to support the one to many association. Remember, the foreign key column always goes on the 'many' side. Hint: generate a migration file, then use Rails migration syntax to create a new column.

rails generate migration add_user_id_to_posts
In the migration: add_column :posts, :user_id, :integer
rake db:migrate
check post table in db

2. Now, we can declare the associations in the models.

Post belongs_to :user
User has_many :posts

==Verify in console

From the rails console, verify that your associations are set up correctly.
1. Create some data to populate the posts and users tables.
2. Associate the data by setting the foreign key column in posts table with a user id.
3. Then, see if you can traverse the association:

Example code:
post = Post.first
user = User.first
post.user_id = user.id
post.user
post.user.username

== Comment model

Create a Comment model.
Note that the Comment model has two associations:
one with the User model to track who created it
another with the Post model to track which post this comment is for.
So you'll need two 1:M associations. Keep this in mind when creating the migration.

rails generate migration create_comments

t.text      :body
t.integer :user_id
t.integer :post_id

create comment.rb
class Comment < ActiveRecord::Base
end

== Comment associations

Set up the two 1:M associations for the Comment model, and verify that everything is wired up correctly in rails console.

post.rb
has_many :comments

user.rb
has_many :comments

comment.rb
belongs_to :post
belongs_to: user

== Category Model

The Category model should only have a name attribute.

== resources :posts , except: :destroy

Put 'resources :posts' in your routes.rb file. Go into console and do 'rake routes' to verify that all 7 routes are created for your application. Prevent the 'delete' route from being accessed, since we won't have the ability to delete posts in our application.

== M:M between Post and Category

Use has_many through to set up a many to many association between Post and Category models. Note that you'll need a model backed join table to do this. You'll need to 1) modify the database schema, 2) set up the associations in the models. Verify via rails console that this worked, and that you can assign categories to posts, and iterate through a category's posts and vice versa (iterate through a post's categories).

Be very careful with pluralization!!!

rails g migration create_categorizations

class CreateCategorizations < ActiveRecord::Migration
  def change
    create_table :categorizations do |t|
      t.belongs_to :post
      t.belongs_to :category
      t.timestamps
    end
  end
end

class Categorization< ActiveRecord::Base
  belongs_to :category
  belongs_to :post
end

class Category < ActiveRecord::Base
  has_many :posts, through: :categorizations
  has_many :categorizations
end

class Post < ActiveRecord::Base
  belongs_to :user
  has_many  :comments
  has_many :categories, through: :categorizations
  has_many :categorizations
end

==  Change default association name

In the Post and Comment models, there is a 'belongs_to' association to the User model. We specify 'belongs_to :user', which gives us a nice handy method that gives us a reference to the user (eg, Post.first.user). Change this association name to 'creator' so we have a better idea of the relationship of this association. For example, we want to be able to do this: Post.first.creator to return the user that created the first post object. Hint: you have to override the default Rails assumptions.

def user
  self.user
end

This works but this reads better:
belongs_to :creator, class_name: 'User', foreign_key: :user_id


== Complete Post actions

Create all the typical actions for the Post resource (index, show, new, create, edit, update). Use model backed forms to create and edit post objects. Also extract the post form to a partial, to be used by both the new and edit templates. Add a validation and make sure the validation fires and you display the error on the template.